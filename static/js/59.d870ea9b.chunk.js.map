{"version":3,"sources":["../src/MapTypeControl/README.md"],"names":[],"mappings":"qIAAA,OAAe","file":"static/js/59.d870ea9b.chunk.js","sourcesContent":["export default \"MapTypeControl 地图类型控件\\n===\\n\\n地图类型控件。你也可以使用 `Map` 组件 `widget` 属性来设置控件更方便。\\n\\n```jsx\\nimport { MapTypeControl, useMapTypeControl } from '@uiw/react-baidu-map';\\n```\\n\\n⚠️ 这个类型控件是属于老的地图控件，加载新的 3D 地图控件[实例](http://lbsyun.baidu.com/jsdemo.htm#webgl2_1)，需要设置参数 `type=webgl&v=1.0` 并且需要自己实现。\\n\\n```js\\n// <script type=\\\"text/javascript\\\" src=\\\"//api.map.baidu.com/api?type=webgl&v=1.0&ak=您的密钥\\\"></script>\\n// GL版命名空间为 BMapGL\\n// 按住鼠标右键，修改倾斜角和角度\\nvar map = new BMapGL.Map(\\\"allmap\\\");    // 创建Map实例\\nmap.centerAndZoom(new BMapGL.Point(116.404, 39.915), 11);  // 初始化地图,设置中心点坐标和地图级别\\nmap.enableScrollWheelZoom(true);     //开启鼠标滚轮缩放\\nvar navi3DCtrl = new BMapGL.NavigationControl3D();  // 添加3D控件\\nmap.addControl(navi3DCtrl);\\n```\\n\\n在组件上传递参数 `type=\\\"webgl\\\"`，此时 `window.BMap` 对象为 `undefined`，在组件中做了自动处理 `window.BMap = window.BMapGL`。\\n\\n```jsx\\n<APILoader\\n  akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\"\\n  type=\\\"webgl\\\"\\n  version=\\\"1.0\\\"\\n>\\n  <Map />\\n</APILoader>\\n```\\n\\n### 基本用法\\n\\n<!--rehype:bgWhite=true&noScroll=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React, { useState, useRef } from 'react';\\nimport { Map, APILoader, MapTypeControl } from '@uiw/react-baidu-map';\\n\\nconst Example = () => {\\n  const [show, setShow] = useState(true);\\n  return (\\n    <>\\n      <button onClick={() => setShow(!show)}>\\n        {show ? '关闭' : '开启'}\\n      </button>\\n      <Map zoom={13} style={{ height: 350 }}>\\n        {show && (\\n          <MapTypeControl />\\n        )}\\n        <MapTypeControl visiable={show} offset={new BMap.Size(40, 40)} anchor={BMAP_ANCHOR_TOP_RIGHT} />\\n      </Map>\\n    </>\\n  );\\n}\\n\\nReactDOM.render((\\n  <div style={{ width: '100%' }}>\\n    <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n      <Example />\\n    </APILoader>\\n  </div>\\n), _mount_);\\n```\\n\\n\\n### 使用 hooks\\n\\n`mapTypeControl`, `setMapTypeControl`\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport { useRef, useEffect, useState } from 'react';\\nimport { Map, APILoader, useMap, useMapTypeControl } from '@uiw/react-baidu-map';\\n\\nconst Example = () => {\\n  const divElm = useRef(null);\\n  const [show, setShow] = useState(true);\\n  const { setContainer, map } = useMap();\\n  const { mapTypeControl } = useMapTypeControl({\\n    map, anchor: BMAP_NAVIGATION_CONTROL_LARGE, visiable: show,\\n  });\\n\\n  useEffect(() => {\\n    if (divElm.current && !map) {\\n      setContainer(divElm.current);\\n    }\\n  }, [map]);\\n  return (\\n    <>\\n      <button onClick={() => setShow(!show)}>\\n        {show ? '关闭' : '开启'}\\n      </button>\\n      <div ref={divElm} style={{ height: 350 }} />\\n    </>\\n  );\\n}\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%' }}>\\n    <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n      <Example />\\n    </APILoader>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### Props\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n| ----- | ----- | ----- | ----- |\\n| visiable | 覆盖物是否可见。 | `boolean` | - |\\n| anchor | 控件的位置偏移值。| `ControlAnchor` | `BMAP_ANCHOR_TOP_RIGHT` |\\n| offset | 控件的水平偏移值。 | `BMap.Size` | - |\\n| type | 设置比例尺单位制 | `BMap.MapTypeControlType` | - |\\n| mapTypes | 设置比例尺单位制 | `MapType[]` | - |\\n\\n### BMap.MapTypeControlType\\n\\n常量表示长度单位制。\\n\\n| 常量 | 值 | 描述 |\\n| ----- | ----- | ----- |\\n| BMAP_MAPTYPE_CONTROL_HORIZONTAL | `0` | 按钮水平方式展示，默认采用此类型展示 |\\n| BMAP_MAPTYPE_CONTROL_DROPDOWN | `1` | 按钮呈下拉列表方式展示 |\\n| BMAP_MAPTYPE_CONTROL_MAP | `2` | 以图片方式展示类型控件，设置该类型后无法指定maptypes属性 |\";"],"sourceRoot":""}