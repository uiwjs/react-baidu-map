{"version":3,"sources":["../src/Marker/README.md"],"names":[],"mappings":"qIAAA,OAAe","file":"static/js/60.38814d50.chunk.js","sourcesContent":["export default \"Marker 点标注组件\\n===\\n\\n表示地图上一个图像标注。\\n\\n```jsx\\nimport { Marker, useMarker } from '@uiw/react-baidu-map';\\n```\\n\\n### 基本用法\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { Map, Marker, APILoader } from '@uiw/react-baidu-map';\\n\\nconst Demo = () => {\\n  function markerRef(props) {\\n    if (props && props.marker) {\\n      console.log('marker::', props.marker, props.map, props.BMap);\\n    }\\n  }\\n  return (\\n    <div style={{ width: '100%', height: 350 }}>\\n      <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n        <Map widget={['NavigationControl']} zoom={13}>\\n          <Marker ref={markerRef} animation={2} position={{ lng: 121.411535, lat: 31.222965 }} />\\n          <Marker position={{ lng: 121.465145, lat: 31.241245 }} />\\n          <Marker position={{ lng: 121.466008, lat: 31.220001 }} type=\\\"loc_red\\\" /> \\n          <Marker position={{ lng: 121.501365, lat: 31.224942 }} type=\\\"simple_blue\\\" />\\n          <Marker position={{ lng: 121.464858, lat: 31.202705 }} type=\\\"simple_red\\\" />\\n          <Marker position={{ lng: 121.458534, lat: 31.224942}} type=\\\"start\\\" />\\n          <Marker position={{ lng: 121.434962, lat: 31.200729 }} type=\\\"end\\\" />\\n          <Marker position={{ lng: 121.478943, lat: 31.2531 }} type=\\\"location\\\" />\\n          <Marker position={{ lng: 121.516888, lat: 31.249149 }} type=\\\"red1\\\" />\\n          <Marker position={{ lng: 121.512576, lat: 31.240504 }} type=\\\"red2\\\" />\\n          <Marker position={{ lng: 121.513726, lat: 31.233588}} type=\\\"blue3\\\" />\\n          <Marker position={{ lng: 121.520912, lat: 31.234576}} type=\\\"blue4\\\" />\\n          <Marker position={{ lng: 121.491879, lat: 31.195045}} type=\\\"dot_red\\\" />\\n          <Marker position={{ lng: 121.485555, lat: 31.195045}} type=\\\"dot_blue\\\" />\\n        </Map>\\n      </APILoader>\\n    </div>\\n  );\\n};\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 自定义标点\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nconst CustomIcon = () => {\\n  const [position, setPosition] = useState({ lng: 121.466008, lat: 31.220001 });\\n  const icon = new BMap.Icon('http://developer.baidu.com/map/jsdemo/img/fox.gif', new BMap.Size(300, 157));\\n  return (\\n    <>\\n      <button onClick={() => setPosition({lng: 121.545202, lat: 31.246679})}>设置 position</button>\\n      <Map zoom={13} center={{ lng: 121.460977, lat: 31.227906 }} style={{ height: 350 }}>\\n        <Marker position={position} icon={icon} animation={2} />\\n      </Map>\\n    </>\\n  );\\n}\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%' }}>\\n    <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n      <CustomIcon />\\n    </APILoader>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 添加事件\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nconst CustomIcon = () => {\\n  const [count, setCount] = useState(0)\\n  const [message, setMessage] = useState('请点击标注点，小箭头!')\\n  const [addEvent, setAddEvent] = useState(false);\\n  const icon = new BMap.Icon('http://developer.baidu.com/map/jsdemo/img/fox.gif', new BMap.Size(300, 157));\\n  function clickHandle({ type, target}) {\\n    console.log('~~~~~clickHandle~~~~~', type, target);\\n    setMessage('啊哈哈！你真的点击了！');\\n    setCount(count + 1);\\n  }\\n  return (\\n    <>\\n      <div>{message} {count}</div>\\n      <Map zoom={13} center={{ lng: 121.460977, lat: 31.227906 }}>\\n        <Marker onClick={clickHandle} position={{ lng: 121.466008, lat: 31.220001 }}  />\\n      </Map>\\n    </>\\n  );\\n}\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%', height: '350px' }}>\\n    <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n      <CustomIcon />\\n    </APILoader>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 可拖拽\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { Map, Marker, APILoader } from '@uiw/react-baidu-map';\\n\\nconst CustomIcon = () => {\\n  const [enableDragging, setEnableDragging] = useState(true);\\n  const [postion, setPostion] = useState();\\n  const [isAddEvent, setIsAddEvent] = useState(false);\\n  const iconfox = new BMap.Icon('http://developer.baidu.com/map/jsdemo/img/fox.gif', new BMap.Size(300, 157));\\n  const iconfox1 = new BMap.Icon('http://api0.map.bdimg.com/images/copyright_logo.png', new BMap.Size(300, 157));\\n  const [icon, setIcon] = useState(iconfox);\\n  function markerRef(props) {\\n    if (props && props.marker && !isAddEvent) {\\n      setIsAddEvent(true)\\n      props.marker.removeEventListener('dragend', dragendHandle);\\n      props.marker.addEventListener('dragend', dragendHandle);\\n    }\\n  }\\n  function dragendHandle({ type, target, pixel, point }) {\\n    console.log('dragendHandle', type, target, pixel, point);\\n    setPostion(JSON.stringify(point));\\n  }\\n  return (\\n    <>\\n      <button onClick={() => setEnableDragging(!enableDragging)}>{enableDragging ? '禁用拖拽' : '启用拖拽'}</button>\\n      <button onClick={() => setIcon(iconfox1)}>设置icon</button>\\n      <button onClick={() => setIcon(iconfox)}>设置icon</button>\\n      {postion && <span>{postion}</span>}\\n      <Map zoom={13} center={{ lng: 121.460977, lat: 31.227906 }}>\\n        <Marker\\n          ref={markerRef}\\n          enableDragging={enableDragging}\\n          position={{ lng: 121.466008, lat: 31.220001 }} icon={icon}\\n        />\\n        <Marker\\n          ref={markerRef}\\n          enableDragging={enableDragging}\\n          position={{ lng: 121.458534, lat: 31.224942}} type=\\\"start\\\"\\n        />\\n        <Marker\\n          ref={markerRef}\\n          enableDragging={enableDragging}\\n          position={{ lng: 121.434962, lat: 31.200729 }} type=\\\"end\\\"\\n        />\\n      </Map>\\n    </>\\n  );\\n}\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%', height: '350px' }}>\\n    <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n      <CustomIcon />\\n    </APILoader>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n\\n### 矢量图标\\n\\n百度地图[官方实例](http://lbsyun.baidu.com/jsdemo.htm#c1_20)。\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { Map, Marker, APILoader } from '@uiw/react-baidu-map';\\n\\nconst CustomIcon = () => {\\n  const [visiable, setVisiable] = useState(true);\\n  const icon = new BMap.Symbol('m0.5,48.67105l106.55963,0m-53.03642,45.73853l52.06349,51.09042m-52.06349,-51.57716l-48.65731,51.57716m48.41391,-112.39955l0,60.82238m16.17517,-77.24814c0,8.93415 -7.24208,16.17461 -16.17517,16.17461c-8.93307,0 -16.17464,-7.24046 -16.17464,-16.17461c0,-8.93309 7.24156,-16.1747 16.17464,-16.1747c8.93309,0 16.17517,7.24161 16.17517,16.1747z', {\\n    rotation: 0, // 顺时针旋转40度\\n    fillColor: 'green',\\n    fillOpacity: 0.8,\\n    strokeColor: '#555',\\n    strokeWeight: 3 // 线宽\\n  });\\n  const iconForwardClosedArrow = new BMap.Symbol(BMap_Symbol_SHAPE_FORWARD_CLOSED_ARROW, {\\n    scale: 5,\\n    strokeWeight: 1,\\n    rotation: 0, // 顺时针旋转30度\\n    fillColor: 'red',\\n    fillOpacity: 0.8\\n  });\\n  const iconBackwardClosedArrow = new BMap.Symbol(BMap_Symbol_SHAPE_BACKWARD_CLOSED_ARROW, {\\n    scale: 5,\\n    strokeWeight: 1,\\n    rotation: 180,\\n    fillColor: 'gold',\\n    fillOpacity: 0.8\\n  });\\n  const iconShapePoint = new BMap.Symbol(BMap_Symbol_SHAPE_POINT, {\\n    scale: 2, // 图标缩放大小\\n    fillColor: \\\"orange\\\", // 填充颜色\\n    fillOpacity: 0.8, // 填充透明度\\n  });\\n  return (\\n    <>\\n      <button onClick={() => setVisiable(!visiable)}>{visiable ? '隐藏' : '显示'}</button>\\n      <Map zoom={13} center={{ lng: 121.460977, lat: 31.227906 }}>\\n        <Marker visiable={visiable} position={{ lng: 121.466008, lat: 31.220001 }} icon={icon} />\\n        <Marker visiable={visiable} position={{ lng: 121.458534, lat: 31.224942}} icon={iconForwardClosedArrow} />\\n        <Marker visiable={visiable} position={{ lng: 121.434962, lat: 31.200729 }} icon={iconBackwardClosedArrow} />\\n        <Marker visiable={visiable} position={{ lng: 121.437962, lat: 31.200729 }} icon={iconShapePoint} />\\n      </Map>\\n    </>\\n  );\\n}\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%', height: '350px' }}>\\n    <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n      <CustomIcon />\\n    </APILoader>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 使用 hooks\\n\\n`marker`, `setMarker`, `type`, `setType`\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { useRef, useEffect, useState } from 'react';\\nimport { Map, APILoader, useMarker } from '@uiw/react-baidu-map';\\n\\nconst Example = () => {\\n  const divElm = useRef(null);\\n  const { setContainer, map } = useMap({ widget: ['GeolocationControl', 'NavigationControl'], zoom: 8 });\\n  const { setType, marker } = useMarker({ map, position: { lng: 121.444017, lat: 31.237787 } });\\n  useEffect(() => {\\n    if (divElm.current && !map) {\\n      setContainer(divElm.current);\\n    }\\n  });\\n  return (\\n    <>\\n      <button onClick={() => setType('red2')}>设置 red2</button>\\n      <button onClick={() => setType('loc_blue')}>设置 loc_blue</button>\\n      <button onClick={() => marker.setPosition(new BMap.Point(121.497197, 31.232847))}>设置坐标点</button>\\n      <button onClick={() => marker.setAnimation(2)}>设置动画</button>\\n      <button onClick={() => marker.setAnimation(null)}>取消动画</button>\\n      <div ref={divElm} style={{ height: '100%' }} />\\n    </>\\n  )\\n}\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%', height: '300px' }}>\\n    <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n      <Example />\\n    </APILoader>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### Props\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n| ----- | ----- | ----- | ----- |\\n| position | **`必填`** 设置标注的地理坐标。[百度拾取坐标系统](http://api.map.baidu.com/lbsapi/getpoint/index.html) | `Point` | - |\\n| animation | 此常量表示标注的动画效果, `1` 坠落动画，`2` 跳动动画。 | `number` | - |\\n| type | 标点类型，默认自定义标点 `location`, `end`, `start`, `simple_red`, `simple_blue`, `loc_blue`, `loc_red`, `dot_red`, `dot_blue', 'red1`, `red2`, `red3`, `red4`, `red5`, `red6`, `red7`, `red8`, `red9', 'blue1`, `blue2`, `blue3`, `blue4`, `blue5`, `blue6`, `blue7`, `blue8`, `blue9`。| `string` | - |\\n| offset | 标注的位置偏移值 | `Size` | - |\\n| enableMassClear | 是否在调用 `map.clearOverlays` 清除此覆盖物 | `boolean` | `true` |\\n| icon | 标注所用的图标对象 | `Icon` | - |\\n| visiable | 覆盖物是否可见。 | `boolean` | - |\\n| enableDragging | 是否启用拖拽 | `boolean` | `false` |\\n| enableClicking | 是否响应点击事件 | `boolean` | `true` |\\n| enableMassClear | 允许覆盖物在map.clearOverlays方法中被清除 | `boolean` | `true` |\\n| raiseOnDrag | 拖拽标注时，标注是否开启离开地图表面效果。 | `boolean` | `false` |\\n| draggingCursor | 拖拽标注时的鼠标指针样式。此属性值需遵循CSS的cursor属性规范 | `string` | - |\\n| rotation | 是否响应点击事件 | `number` | - |\\n| shadow | 阴影图标 | `Icon` | - |\\n| title | 鼠标移到 marker 上的显示内容 | `string` | - |\\n\\n### 事件\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n| ----- | ----- | ----- | ----- |\\n| onClick | 点击标注图标后会触发此事件 | (event: { type: string, target: any }): void; | - |\\n| onDblClick | 双击标注图标后会触发此事件 | (event: { type: string, target: any, point: Point, pixel: Pixel }): void; | - |\\n| onMouseDown | 鼠标在标注图上按下触发此事件 | (event: { type: string, target: any, point: Point, pixel: Pixel }): void; | - |\\n| onMouseUp | 鼠标在标注图上释放触发此事件 | (event: { type: string, target: any, point: Point, pixel: Pixel }): void; | - |\\n| onMouseOut | 鼠标离开标注时触发此事件 | (event: { type: string, target: any, point: Point, pixel: Pixel }): void; | - |\\n| onMouseOver | 当鼠标进入标注图标区域时会触发此事件 | (event: { type: string, target: any, point: Point, pixel: Pixel }): void; | - |\\n| onRemove | 移除标注时触发 | (event: { type: string, target: any }): void; | - |\\n| onInfowindowClose | 信息窗在此标注上关闭时触发此事件 | (event: { type: string, target: any }): void; | - |\\n| onInfowindowOpen | 信息窗在此标注上打开时触发此事件 | (event: { type: string, target: any }): void; | - |\\n| onDragStart | 开始拖拽标注时触发此事件 | (event: { type: string, target: any }): void; | - |\\n| onDragging | 拖拽标注过程中触发此事件 | (event: { type: string, target: any, point: Point, pixel: Pixel }): void; | - |\\n| onDragEnd | 拖拽结束时触发此事件 | (event: { type: string, target: any, point: Point, pixel: Pixel }): void; | - |\\n| onRightClick | 右键点击标注时触发此事件 | (event: { type: string, target: any }): void; | - |\\n\\n### ShapeType\\n\\n| 常量 | 描述 |\\n| ---- | ---- |\\n| BMAP_ANIMATION_DROP | 坠落动画 |\\n| BMAP_ANIMATION_BOUNCE | 跳动动画 |\\n\";"],"sourceRoot":""}