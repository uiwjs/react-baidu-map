{"version":3,"sources":["../src/Circle/README.md"],"names":[],"mappings":"sIAAA,OAAe","file":"static/js/48.c6ace9e5.chunk.js","sourcesContent":["export default \"Circle 圆\\n===\\n\\n表示地图上的圆覆盖物。\\n\\n```jsx\\nimport { Circle, useCircle } from '@uiw/react-baidu-map';\\n```\\n\\n### 基本用法\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React, { useState } from 'react';\\nimport { Map, Circle, APILoader } from '@uiw/react-baidu-map';\\n\\nconst Example = () => {\\n  const [visiable, setVisiable] = useState(true);\\n  const [enableEditing, setEnableEditing] = useState(false);\\n  const [strokeOpacity, setStrokeOpacity] = useState(0.9);\\n  function circleRef(props) {\\n    if (props && props.circle) {\\n      console.log('circle:', props.circle, props.map, props.BMap);\\n    }\\n  }\\n  return (\\n    <>\\n      <button onClick={() => setVisiable(!visiable)}>{visiable ? '隐藏' : '显示'}</button>\\n      <button onClick={() => setEnableEditing(!enableEditing)}>{enableEditing ? '取消编辑' : '编辑'}</button>\\n      <button onClick={() => setStrokeOpacity(0.7)}>透明度0.7</button>\\n      <button onClick={() => setStrokeOpacity(0.2)}>透明度0.2</button>\\n      <Map widget={['NavigationControl']}>\\n        <Circle\\n          ref={circleRef}\\n          visiable={visiable}\\n          enableEditing={enableEditing}\\n          strokeOpacity={strokeOpacity}\\n          strokeWeight={1}\\n          center={{ lng: 121.455228, lat: 31.240257 }}\\n          radius={1000}\\n        />\\n        <Circle\\n          visiable={visiable}\\n          enableEditing={enableEditing}\\n          strokeOpacity={strokeOpacity}\\n          center={{ lng: 121.490298, lat: 31.229388 }}\\n          radius={1500}\\n        />\\n      </Map>\\n    </>\\n  );\\n}\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%', height: '350px' }}>\\n    <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n      <Example />\\n    </APILoader>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n\\n### 使用 hooks\\n\\n`circle`, `setCircle`\\n\\n<!--rehype:bgWhite=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { useRef, useEffect, useState } from 'react';\\nimport { Map, APILoader, useMap, useCircle } from '@uiw/react-baidu-map';\\n\\nconst Example = () => {\\n  const [enableEditing, setEnableEditing] = useState(false);\\n  const [strokeOpacity, setStrokeOpacity] = useState(0.9);\\n  const divElm = useRef(null);\\n  const { setContainer, map } = useMap({\\n    widget: ['GeolocationControl', 'NavigationControl']\\n  });\\n  const { circle } = useCircle({ map,\\n    enableScrollWheelZoom: true, // 启用滚轮放大缩小，默认禁用\\n    enableEditing, strokeOpacity,\\n    center: { lng: 121.455228, lat: 31.240257 },\\n    radius: 1000,\\n  });\\n  useCircle({ map,\\n    strokeWeight: 1,\\n    center: { lng: 121.490298, lat: 31.229388 },\\n    radius: 1500,\\n  });\\n\\n  useEffect(() => {\\n    if (divElm.current) {\\n      setContainer(divElm.current);\\n    }\\n  });\\n\\n  useEffect(() => {\\n    if (map && circle) {\\n      if (enableEditing) {\\n        circle.setFillColor('red');\\n        circle.enableEditing();\\n      } else {\\n        circle.setFillColor('transparent');\\n        circle.disableEditing();\\n      }\\n    }\\n  }, [enableEditing]);\\n\\n  useEffect(() => {\\n    if (map && circle) {\\n      circle.setStrokeOpacity(strokeOpacity);\\n    }\\n  }, [strokeOpacity]);\\n\\n  return (\\n    <>\\n      <button onClick={() => setEnableEditing(!enableEditing)}>{enableEditing ? '取消编辑' : '开启编辑'}</button>\\n      <button onClick={() => setStrokeOpacity(0.7)}>透明度0.7</button>\\n      <button onClick={() => setStrokeOpacity(0.2)}>透明度0.2</button>\\n      <div ref={divElm} style={{ height: '100%' }} />\\n    </>\\n  )\\n}\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%', height: '300px' }}>\\n    <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n      <Example />\\n    </APILoader>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### Props\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n| ----- | ----- | ----- | ----- |\\n| center | **`必填`** 圆形的中心点坐标。[百度拾取坐标系统](http://api.map.baidu.com/lbsapi/getpoint/index.html) | `Point` | - |\\n| radius | **`必填`** 设置圆形的半径，单位为米。 | `number` | - |\\n| visiable | 覆盖物是否可见。 | `boolean` | - |\\n| strokeColor | 圆形边线颜色 | `String` | - |\\n| fillColor | 圆形填充颜色。当参数为空时，圆形将没有填充效果 | `String` | - |\\n| strokeWeight | 圆形边线的宽度，以像素为单位 | `Number` | - |\\n| strokeOpacity | 圆形边线透明度，取值范围0 - 1 | `Number` | - |\\n| fillOpacity | 圆形填充的透明度，取值范围0 - 1 | `Number` | - |\\n| strokeStyle | 圆形边线的样式，solid或dashed | `String` | - |\\n| enableMassClear | 是否在调用 `map.clearOverlays` 清除此覆盖物。 | `Boolean` | `true` |\\n| enableEditing | 是否启用线编辑。 | `Boolean` | `false` |\\n| enableClicking | 是否响应点击事件。 | `Boolean` | `true` |\\n\\n### 事件\\n\\n| 参数 | 说明 | 类型 |\\n| ----- | ----- | ----- |\\n| onClick | 鼠标点击圆形后会触发此事件 | (event: { type: string, target: any, point: Point, pixel: Pixel }): void; |\\n| onDblClick | 鼠标双击圆形后会触发此事件 | (event: { type: string, target: any, point: Point, pixel: Pixel }): void; |\\n| onMouseDown | 鼠标在圆形上按下触发此事件 | (event: { type: string, target: any, point: Point, pixel: Pixel }): void; |\\n| onMouseUp | 鼠标在圆形释放触发此事件 | (event: { type: string, target: any, point: Point, pixel: Pixel }): void; |\\n| onMouseOut | 鼠标离开圆形时触发此事件 | (event: { type: string, target: any, point: Point, pixel: Pixel }): void; |\\n| onMouseOver | 当鼠标进入圆形区域时会触发此事件 | (event: { type: string, target: any, point: Point, pixel: Pixel }): void; |\\n| onRemove | 移除圆形时触发此事件 | (event: { type: string, target: any }): void; |\\n| onLineUpdate | 圆形覆盖物的属性发生变化时触发此事件 | (event: { type: string, target: any }): void; |\";"],"sourceRoot":""}