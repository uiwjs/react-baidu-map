{"version":3,"sources":["../../packages/point-collection/README.md"],"names":[],"mappings":"qGAAA,OAAe","file":"static/js/64.97b7fa57.chunk.js","sourcesContent":["export default \"PointCollection 加载海量点\\n===\\n\\n表示海量点类，利用该类可同时在地图上展示万级别的点，目前仅适用于html5浏览器。\\n\\n> 渲染海量点会耗费一定性能，应该注意不要频繁变动 point 数组\\n\\n```jsx\\nimport { PointCollection, usePointCollection } from '@uiw/react-baidu-map';\\n// 或者单独安装使用\\nimport PointCollection, { usePointCollection } from '@uiw/react-baidu-map-point-collection';\\n```\\n\\n### 基本用法\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { useEffect, useState } from 'react';\\nimport { Map, PointCollection, APILoader, requireScript } from '@uiw/react-baidu-map';\\n\\nconst Example = () => {\\n  const [visiable, setVisiable] = useState(true);\\n  const [points, setPoints] = useState([]);\\n  const [position, setPositon] = useState('');\\n  useEffect(() => {\\n    if(points.length === 0) {\\n      requireScript('https://lbsyun.baidu.com/jsdemo/data/points-sample-data.js').then(() => {\\n        if(window.data && window.data.data) {\\n          setPoints(window.data.data);\\n        }\\n      });\\n    }\\n  });\\n  function compRef(props) {\\n    if (props && props.pointCollection) {\\n      console.log('pointCollection::', props.pointCollection, props.map, props.BMap);\\n    }\\n  }\\n  return (\\n    <>\\n      <button onClick={() => setVisiable(!visiable)}>{visiable ? '隐藏' : '显示'}</button>\\n      {position && <span>标注点经纬度：{position}</span>}\\n      <Map widget={['NavigationControl']} zoom={5} style={{ height: 350 }}>\\n        <PointCollection\\n          ref={compRef}\\n          visiable={visiable}\\n          onClick={(e) => {\\n            setPositon(JSON.stringify(e.point))\\n          }}\\n          styles={{ shape: 1 }}\\n          points={[\\n            ...points\\n          ]}\\n        />\\n      </Map>\\n    </>\\n  )\\n}\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%' }}>\\n    <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n      <Example />\\n    </APILoader>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n\\n### 使用 hooks\\n\\n可以使用 `pointCollection`, `setPointCollection`, `points`, `setPoints` 钩子函数。\\n\\n> 下面实例[`来源官方网站实例`](http://lbsyun.baidu.com/jsdemo.htm#c1_19)。\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { useRef, useEffect, useState } from 'react';\\nimport { Map, APILoader, usePointCollection } from '@uiw/react-baidu-map';\\n\\nlet loadData = false;\\nlet data = []\\nconst Example = () => {\\n  const divElm = useRef();\\n  const { setContainer, map } = useMap({ widget: ['GeolocationControl', 'NavigationControl'], zoom: 5 });\\n  const { points, setPoints } = usePointCollection({ map });\\n  useEffect(() => {\\n    if (divElm.current && !map) {\\n      setContainer(divElm.current);\\n    }\\n    if (!loadData) {\\n      requireScript('https://lbsyun.baidu.com/jsdemo/data/points-sample-data.js').then(() => {\\n        if(window.data && window.data.data) {\\n          if (!loadData) {\\n            loadData = true;\\n            data = window.data.data;\\n            setPoints(window.data.data);\\n          }\\n        }\\n      });\\n    }\\n  });\\n  return (\\n    <>\\n      <button onClick={() => setPoints(points.length > 0 ? [] : data)}>{points && points.length > 0 ? '清空标注' : '显示标注'}</button>\\n      <div ref={divElm} style={{ height: '100%' }} />\\n    </>\\n  )\\n}\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%', height: '300px' }}>\\n    <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n      <Example />\\n    </APILoader>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### Props\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n| ----- | ----- | ----- | ----- |\\n| points | **`必填`** 创建海量点类。为点的坐标集合 `[[74.438,39.006,1],[74.932,38.382,1]]` | [lng: number, lat: number][] | - |\\n| visiable | 覆盖物是否可见。 | `boolean` | - |\\n| styles | 设置 `{shape,size,color}`，是一个可控属性 | object | - |\\n| shape | 海量点的预设形状 | `ShapeType` | `BMAP_POINT_SHAPE_WATERDROP` |\\n| size | 海量点的预设尺寸 | `SizeType` | `BMAP_POINT_SIZE_SMALL` |\\n| color | 海量点的颜色，默认为'#fa937e'，同时支持颜色字符串，如'red'； | `string` | `#d340c3` |\\n\\n### 事件\\n\\n| 参数 | 说明 | 类型 |\\n| ----- | ----- | ----- |\\n| onClick | 鼠标点击点时会触发此事件 | (event: { type: string, target: any, point: Point }) => void; |\\n| onMouseOver | 鼠标移入点时会触发该事件 | (event: { type: string, target: any, point: Point }) => void; |\\n| onMouseOut | 鼠标移出点时会触发该事件 | (event: { type: string, target: any }) => void; |\\n\\n### ShapeType\\n\\n| 常量 | 描述 |\\n| ---- | ---- |\\n|BMAP_POINT_SHAPE_CIRCLE | 圆形，为默认形状 |\\n|BMAP_POINT_SHAPE_STAR | 星形 |\\n|BMAP_POINT_SHAPE_SQUARE | 方形 |\\n|BMAP_POINT_SHAPE_RHOMBUS | 菱形 |\\n|BMAP_POINT_SHAPE_WATERDROP | 水滴状，该类型无size和color属性 |\\n\\n### SizeType\\n\\n| 常量 | 描述 |\\n| ---- | ---- |\\n| BMAP_POINT_SIZE_TINY | 定义点的尺寸为超小，宽高为2px*2px |\\n| BMAP_POINT_SIZE_SMALLER | 定义点的尺寸为很小，宽高为4px*4px |\\n| BMAP_POINT_SIZE_SMALL | 定义点的尺寸为小，宽高为8px*8px |\\n| BMAP_POINT_SIZE_NORMAL | 定义点的尺寸为正常，宽高为10px*10px，为海量点默认尺寸 |\\n| BMAP_POINT_SIZE_BIG | 定义点的尺寸为大，宽高为16px*16px |\\n| BMAP_POINT_SIZE_BIGGER | 定义点的尺寸为很大，宽高为20px*20px |\\n| BMAP_POINT_SIZE_HUGE | 定义点的尺寸为超大，宽高为30px*30px |\";"],"sourceRoot":""}