{"version":3,"file":"static/js/451.50eb24bc.chunk.js","mappings":"+HACA,SACIA,WAAY,CAAG,EACfC,KAAM,CAAC,EACPC,OAAQ,uoLACRC,SAAS,GACTC,aAAa,G","sources":["../../packages/canvas-layer/README.md"],"sourcesContent":["\nexport default {\n    components: {  },\n    data: {},\n    source: \"CanvasLayer 自定义Canvas\\n===\\n\\n[![Buy me a coffee](https://img.shields.io/badge/Buy%20me%20a%20coffee-048754?logo=buymeacoffee)](https://jaywcjlove.github.io/#/sponsor)\\n[![npm version](https://img.shields.io/npm/v/@uiw/react-baidu-map-canvas-layer.svg)](https://www.npmjs.com/package/@uiw/react-baidu-map-canvas-layer)\\n[![Downloads](https://img.shields.io/npm/dm/@uiw/react-baidu-map-canvas-layer.svg?style=flat)](https://www.npmjs.com/package/@uiw/react-baidu-map-canvas-layer)\\n\\n⚠️ `BMap.CanvasLayer` API 不知道为何没有了\\n\\n用于在地图上绘制自定义的canvas2D或WebGL图形，[百度 CanvasLayer 文档](http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference_3_0.html#a3b28)。\\n\\n```jsx\\nimport { CanvasLayer, useCanvasLayer } from '@uiw/react-baidu-map';\\n// 或者单独安装使用\\nimport CanvasLayer, { useCanvasLayer } from '@uiw/react-baidu-map-canvas-layer';\\n```\\n\\n### 基本用法\\n\\n```jsx\\nimport React, { useState } from 'react';\\nimport { Map, CanvasLayer, APILoader } from '@uiw/react-baidu-map';\\n\\nconst Example = () => {\\n  const [visiable, setVisiable] = useState(true);\\n  function canvasLayerRef(props) {\\n    if (props && props.canvasLayer) {\\n      console.log('canvasLayer:', props.canvasLayer, props.map, props.BMap);\\n    }\\n  }\\n  return (\\n    <>\\n      <button onClick={() => setVisiable(!visiable)}>{visiable ? '隐藏' : '显示'}</button>\\n      <Map zoom={12} widget={['NavigationControl']} style={{ height: 350 }}>\\n        <CanvasLayer\\n          ref={canvasLayerRef}\\n          visiable={visiable}\\n          update={({ canvas, map }) => {\\n            const ctx = canvas.getContext('2d');\\n            if (!ctx) {\\n              return;\\n            }\\n            ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\\n            const temp = {};\\n            ctx.fillStyle = 'rgba(50, 50, 255, 0.7)';\\n            ctx.beginPath();\\n            const data = [\\n              new BMap.Point(121.434244,31.247173),\\n              new BMap.Point(121.450916,31.200729),\\n              new BMap.Point(121.519906,31.230376),\\n            ];\\n\\n            for (let i = 0, len = data.length; i < len; i++) {\\n              // 绘制时需要对经纬度进行转换\\n              const pixel = map.pointToPixel(data[i]);\\n              ctx.fillRect(pixel.x, pixel.y, 30, 30);\\n            }\\n          }}\\n        />\\n      </Map>\\n    </>\\n  );\\n}\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%' }}>\\n    <APILoader akay=\\\"eYpCTECSntZmw0WyoQ7zFpCRR9cpgHFG\\\" version=\\\"2.0\\\">\\n      <Example />\\n    </APILoader>\\n  </div>\\n);\\nexport default Demo;\\n```\\n\\n\\n### 使用 hooks\\n\\n`canvasLayer`, `setCanvasLayer`\\n\\n```jsx\\nimport React from 'react';\\nimport { useRef, useEffect, useState } from 'react';\\nimport { Map, APILoader, Provider, useMap, useCanvasLayer } from '@uiw/react-baidu-map';\\n\\nconst Example = () => {\\n  const divElm = useRef(null);\\n  const [visiable, setVisiable] = useState(true);\\n  const { setContainer, map } = useMap({\\n    enableScrollWheelZoom: true,\\n    zoom: 12, widget: ['GeolocationControl', 'NavigationControl']\\n  });\\n  useCanvasLayer({ map, visiable,\\n    update: ({ canvas, map }) => {\\n      const ctx = canvas.getContext('2d');\\n      if (!ctx) {\\n        return;\\n      }\\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\\n      const temp = {};\\n      ctx.fillStyle = 'rgba(50, 50, 255, 0.7)';\\n      ctx.beginPath();\\n      const data = [\\n        new BMap.Point(121.434244,31.247173),\\n        new BMap.Point(121.450916,31.200729),\\n        new BMap.Point(121.519906,31.230376),\\n      ];\\n\\n      for (let i = 0, len = data.length; i < len; i++) {\\n        // 绘制时需要对经纬度进行转换\\n        const pixel = map.pointToPixel(data[i]);\\n        ctx.fillRect(pixel.x, pixel.y, 30, 30);\\n      }\\n    }\\n  });\\n\\n  useEffect(() => {\\n    if (divElm.current) {\\n      setContainer(divElm.current);\\n    }\\n  });\\n\\n  return (\\n    <>\\n      <button onClick={() => setVisiable(!visiable)}>{visiable ? '隐藏' : '显示'}</button>\\n      <div ref={divElm} style={{ height: 350 }} />\\n    </>\\n  )\\n}\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%' }}>\\n    <APILoader akay=\\\"eYpCTECSntZmw0WyoQ7zFpCRR9cpgHFG\\\" version=\\\"2.0\\\">\\n      <Provider>\\n        <Example />\\n      </Provider>\\n    </APILoader>\\n  </div>\\n);\\nexport default Demo;\\n```\\n\\n### Props\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n| ----- | ----- | ----- | ----- |\\n| update | 具体的绘制逻辑。通过返回参数获取当前的 canvas 对象 | `Point` | - |\\n| zIndex | 对应canvas的css z-index属性，当添加了多个CanvasLayer时，可以用于设置层叠顺序。 | `number` | - |\\n| paneName | CanvasLayer位于的覆盖物层级，例：`paneName: floatPane`。JSAPI把地图覆盖物分为了8个层级，顶层为`floatPane`， 低层为 `vertexPane`。可以通过 `Map` 实例的 `getPanes()` 方法，获取到8个层级的名称。 | `floatPane`, `floatShadow`, `labelPane`, `mapPane`, `markerMouseTarget`, `markerPane`, `markerShadow`, `vertexPane` | - |\\n| visiable | 覆盖物是否可见。 | `boolean` | - |\\n\",\n    headings:[],\n    headingsList:[],\n  }"],"names":["components","data","source","headings","headingsList"],"sourceRoot":""}