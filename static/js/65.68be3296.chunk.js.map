{"version":3,"sources":["../src/Polyline/README.md"],"names":[],"mappings":"qIAAA,OAAe","file":"static/js/65.68be3296.chunk.js","sourcesContent":["export default \"Polyline 折线组件\\n===\\n\\n使用浏览器的矢量制图工具（如果可用）在地图上绘制折线的地图叠加层。\\n\\n```jsx\\nimport { Polyline, usePolyline } from '@uiw/react-baidu-map';\\n```\\n\\n### 基本用法\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React, { useState } from 'react';\\nimport { Map, Polyline, APILoader } from '@uiw/react-baidu-map';\\n\\nconst Example = () => {\\n  const [isHiden, setIsHiden] = useState(true);\\n  const [enableEditing, setEnableEditing] = useState(false);\\n  const [strokeOpacity, setStrokeOpacity] = useState(0.9);\\n  return (\\n    <>\\n      <button onClick={() => setIsHiden(!isHiden)}>{isHiden ? \\\"隐藏\\\" : \\\"显示\\\"}</button>\\n      <button onClick={() => setEnableEditing(!enableEditing)}>{enableEditing ? '取消编辑' : '编辑'}</button>\\n      <button onClick={() => setStrokeOpacity(0.7)}>透明度0.7</button>\\n      <button onClick={() => setStrokeOpacity(0.2)}>透明度0.2</button>\\n      <Map zoom={13} center=\\\"北京\\\" widget={['NavigationControl']} style={{ height: 350 }}>\\n        {isHiden && (\\n          <Polyline\\n            enableEditing={enableEditing}\\n            strokeOpacity={strokeOpacity}\\n            path={[\\n              { lng: 116.399, lat: 39.910 },\\n              { lng: 116.405, lat: 39.920 },\\n              { lng: 116.423493, lat: 39.907445 },\\n            ]}\\n          />\\n        )}\\n        {isHiden && (\\n          <Polyline\\n            enableEditing={enableEditing}\\n            strokeOpacity={strokeOpacity}\\n            path={[\\n              { lng: 116.399, lat: 39.920977 },\\n              { lng: 116.385243, lat: 39.913063 },\\n              { lng: 116.394226, lat: 39.917988 },\\n              { lng: 116.401772, lat: 39.921364 },\\n              { lng: 116.41248, lat: 39.927893 },\\n            ]}\\n          />\\n        )}\\n      </Map>\\n    </>\\n  );\\n}\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%' }}>\\n    <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n      <Example />\\n    </APILoader>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 使用 hooks\\n\\n`polyline`, `setPolyline`, `path`, `setPath`\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport { useRef, useEffect, useState } from 'react';\\nimport { Map, APILoader, useMap, usePolyline } from '@uiw/react-baidu-map';\\n\\nconst Example = () => {\\n  const [enableEditing, setEnableEditing] = useState(false);\\n  const [strokeOpacity, setStrokeOpacity] = useState(0.9);\\n  const divElm = useRef(null);\\n  const { setContainer, map } = useMap({\\n    zoom: 13,\\n    center: '北京',\\n    widget: ['GeolocationControl', 'NavigationControl']\\n  });\\n  const { polyline } = usePolyline({ map,\\n    enableEditing, strokeOpacity,\\n    path: [\\n      { lng: 116.387112, lat: 39.920977 },\\n      { lng: 116.385243, lat: 39.913063 },\\n      { lng: 116.394226, lat: 39.917988 },\\n      { lng: 116.401772, lat: 39.921364 },\\n      { lng: 116.41248, lat: 39.927893 },\\n    ],\\n  });\\n  usePolyline({ map,\\n    path: [\\n      { lng: 116.399, lat: 39.910 },\\n      { lng: 116.405, lat: 39.920 },\\n      { lng: 116.423493, lat: 39.907445 },\\n    ],\\n  });\\n  useEffect(() => {\\n    if (divElm.current) {\\n      setContainer(divElm.current);\\n    }\\n  });\\n  useEffect(() => {\\n    if (map) {\\n      // 启用滚轮放大缩小，默认禁用\\n      map.enableScrollWheelZoom();\\n    }\\n  }, [map]);\\n\\n  useEffect(() => {\\n    if (map && polyline) {\\n      if (enableEditing) {\\n        polyline.setFillColor('red');\\n        polyline.enableEditing();\\n      } else {\\n        polyline.setFillColor('transparent');\\n        polyline.disableEditing();\\n      }\\n    }\\n  }, [enableEditing]);\\n\\n  useEffect(() => {\\n    if (map && polyline) {\\n      polyline.setStrokeOpacity(strokeOpacity);\\n    }\\n  }, [strokeOpacity]);\\n\\n  return (\\n    <>\\n      <button onClick={() => setEnableEditing(!enableEditing)}>{enableEditing ? '取消编辑' : '编辑'}</button>\\n      <button onClick={() => setStrokeOpacity(0.7)}>透明度0.7</button>\\n      <button onClick={() => setStrokeOpacity(0.2)}>透明度0.2</button>\\n      <div ref={divElm} style={{ height: '100%' }} />\\n    </>\\n  )\\n}\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%', height: '300px' }}>\\n    <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n      <Example />\\n    </APILoader>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### Props\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n| ----- | ----- | ----- | ----- |\\n| visiable | 覆盖物是否可见。 | `boolean` | - |\\n| strokeColor |  折线颜色 | String | - |\\n| strokeWeight |  折线的宽度，以像素为单位 | Number | - |\\n| strokeOpacity |  折线的透明度，取值范围0 - 1 | Number | - |\\n| strokeStyle |  折线的样式，solid或dashed | String | - |\\n| enableMassClear |  是否在调用map.clearOverlays清除此覆盖物，默认为true | Boolean | - |\\n| enableEditing |  是否启用线编辑，默认为false | Boolean | - |\\n| enableClicking |  是否响应点击事件，默认为true | Boolean | - |\\n| icons | 配置贴合折线的图标 | IconSequence[] | - |\\n\\n### 事件\\n\\n| 参数 | 说明 | 类型 |\\n| ----- | ----- | ----- |\\n| onClick | 点击折线后会触发此事件 | (event: { type: string, target: any, point: Point, pixel: Pixel }): void; |\\n| onDblClick | 双击折线后会触发此事件 | (event: { type: string, target: any, point: Point, pixel: Pixel }): void; |\\n| onMouseDown | 鼠标在折线上按下触发此事件 | (event: { type: string, target: any, point: Point, pixel: Pixel }): void; |\\n| onMouseUp | 鼠标在折线释放触发此事件 | (event: { type: string, target: any, point: Point, pixel: Pixel }): void; |\\n| onMouseOut | 鼠标离开折线时触发此事件 | (event: { type: string, target: any, point: Point, pixel: Pixel }): void; |\\n| onMouseOver | 当鼠标进入折线区域时会触发此事件 | (event: { type: string, target: any, point: Point, pixel: Pixel }): void; |\\n| onRemove | 移除折线时触发 | (event: { type: string, target: any }): void; |\\n| onLineUpdate | 覆盖物的属性发生变化时触发 | (event: { type: string, target: any }): void; |\";"],"sourceRoot":""}