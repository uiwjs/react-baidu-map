{"version":3,"sources":["../../packages/ground-overlay/README.md"],"names":[],"mappings":"qGAAA,OAAe","file":"static/js/56.691c5eac.chunk.js","sourcesContent":["export default \"GroundOverlay 地面叠加层\\n===\\n\\n地图上的地面叠加层。\\n\\n```jsx\\nimport { GroundOverlay, useGroundOverlay } from '@uiw/react-baidu-map';\\n// 或者单独安装使用\\nimport GroundOverlay, { useGroundOverlay } from '@uiw/react-baidu-map-ground-overlay';\\n```\\n\\n### 基本用法\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React, { useState } from 'react';\\nimport { Map, GroundOverlay, APILoader } from '@uiw/react-baidu-map';\\n\\nconst Example = () => {\\n  const [visiable, setVisiable] = useState(true);\\n  const bounds = new BMap.Bounds(\\n    new BMap.Point(116.29579,39.837146),\\n    new BMap.Point(116.475451,39.9764)\\n  );\\n  function groundRef(props) {\\n    if (props && props.groundOverlay) {\\n      console.log('groundOverlay:', props.groundOverlay);\\n    }\\n  }\\n  return (\\n    <>\\n      <button onClick={() => setVisiable(!visiable)}>{visiable ? '隐藏' : '显示'}</button>\\n      <Map center=\\\"北京\\\" zoom={11} widget={['NavigationControl']} style={{ height: 350 }}>\\n        {visiable && (\\n          <GroundOverlay\\n            ref={groundRef}\\n            bounds={bounds}\\n            imageURL=\\\"http://lbsyun.baidu.com/jsdemo/img/si-huan.png\\\"\\n            opacity={1}\\n            displayOnMinLevel={10}\\n            displayOnMaxLevel={14}\\n          />\\n        )}\\n      </Map>\\n    </>\\n  );\\n}\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%' }}>\\n    <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n      <Example />\\n    </APILoader>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 使用 hooks\\n\\n`groundOverlay`, `useGroundOverlay`\\n\\n> ⚠️ 不知为何 `show` 和 `hide` 方法存在但不起作用，理论上是继承 [`Overlay`](https://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference_3_0.html#a3b0) 类就会有 `show()` 和 `hide()` 方法。\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { useRef, useEffect, useState } from 'react';\\nimport { Map, APILoader, useMap, useGroundOverlay } from '@uiw/react-baidu-map';\\n\\nconst Example = () => {\\n  const divElm = useRef(null);\\n  const [visiable, setVisiable] = useState(true);\\n  const bounds = new BMap.Bounds(\\n    new BMap.Point(116.29579,39.837146),\\n    new BMap.Point(116.475451,39.9764)\\n  );\\n  const { map, setContainer } = useMap({ center: '北京', zoom: 11, widget: ['GeolocationControl', 'NavigationControl'] });\\n  const { groundOverlay, setGroundOverlay } = useGroundOverlay({ map, bounds, visiable, imageURL: 'http://lbsyun.baidu.com/jsdemo/img/si-huan.png',\\n    onClick: () => {\\n      console.log('点击事件！');\\n    },\\n  });\\n\\n  useEffect(() => {\\n    if (divElm.current) {\\n      setContainer(divElm.current);\\n    }\\n  });\\n  useEffect(() => {\\n    if (groundOverlay && map) {\\n      // 不知为何 方法存在但不起作用，\\n      // 理论上是继承 Overlay 类就会有 `show` 和 `hide` 方法。\\n      console.log('groundOverlay:hide:', visiable, groundOverlay.hide);\\n      console.log('groundOverlay:show:', visiable, groundOverlay.show);\\n      visiable ? groundOverlay.hide() : groundOverlay.show();\\n    }\\n  }, [visiable]);\\n  return (\\n    <>\\n      <button onClick={() => setVisiable(!visiable)}>{visiable ? '隐藏' : '显示'}</button>\\n      <div ref={divElm} style={{ height: '100%' }} />\\n    </>\\n  )\\n}\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%', height: '300px' }}>\\n    <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n      <Example />\\n    </APILoader>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### Props\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n| ----- | ----- | ----- | ----- |\\n| bounds | **`必填`** 图层显示的矩形区域 | `BMap.Bounds(sw: Point, ne: Point)` | - |\\n| imageURL | **`必填`** 图层地址 | `string` | - |\\n| opacity | 图层透明度 | `number` | - |\\n| displayOnMinLevel | 图层显示的最小级别 | `number` | - |\\n| displayOnMaxLevel | 图层显示的最小级别 | `number` | - |\\n\\n```js\\nconst bounds = new BMap.Bounds(\\n  new BMap.Point(116.29579,39.837146),\\n  new BMap.Point(116.475451,39.9764)\\n);\\n```\\n\\n### 事件\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n| ----- | ----- | ----- | ----- |\\n| onClick | 鼠标点击图层后会触发此事件 | (event: { type: string, target: any }) => void; | - |\\n| onDblClick | 鼠标双击图层后会触发此事件 | (event: { type: string, target: any }) => void; | - |\";"],"sourceRoot":""}