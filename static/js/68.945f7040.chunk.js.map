{"version":3,"sources":["../../packages/tile-layer/README.md"],"names":[],"mappings":"qGAAA,OAAe","file":"static/js/68.945f7040.chunk.js","sourcesContent":["export default \"TileLayer 地图图层\\n===\\n\\n此类表示一个地图图层，您可以向地图中添加自定义图层，官方原生实例：https://lbsyun.baidu.com/jsdemo.htm#g0_2。\\n\\n```jsx\\nimport { TileLayer, useTileLayer } from '@uiw/react-baidu-map';\\n// 或者单独安装使用\\nimport TileLayer, { useTileLayer } from '@uiw/react-baidu-map-tile-layer';\\n```\\n\\n### 基本用法\\n\\n<!--rehype:bgWhite=true&noScroll=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React, { useState, useRef } from 'react';\\nimport { Map, APILoader, TileLayer } from '@uiw/react-baidu-map';\\n\\nconst Example = () => {\\n  const [show, setShow] = useState(true);\\n  return (\\n    <>\\n      <button onClick={() => setShow(!show)}>\\n        {show ? '关闭' : '开启'}\\n      </button>\\n      <Map widget={['NavigationControl']} zoom={16} center={{ lng: 116.332782, lat: 40.007978 }} style={{ height: 350 }}>\\n          <TileLayer\\n            visiable={show}\\n            getTilesUrl={(tileCoord, zoom) => {\\n              const { x, y } = tileCoord;\\n              // 根据当前坐标，选取合适的瓦片图\\n              return `http://lbsyun.baidu.com/jsdemo/demo/tiles/${zoom}/tile${x}_${y}.png`;\\n            }}\\n          />\\n      </Map>\\n    </>\\n  );\\n}\\n\\nReactDOM.render((\\n  <div style={{ width: '100%' }}>\\n    <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n      <Example />\\n    </APILoader>\\n  </div>\\n), _mount_);\\n```\\n\\n\\n### 使用 hooks\\n\\n`tileLayer`, `setTileLayer`, `visiable`, `setVisiable`\\n\\n<!--rehype:bgWhite=true&noScroll=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { useRef, useEffect, useState } from 'react';\\nimport { Map, APILoader, useMap, useTileLayer } from '@uiw/react-baidu-map';\\n\\nconst Example = () => {\\n  const divElm = useRef(null);\\n  const [show, setShow] = useState(true);\\n  const { setContainer, map } = useMap({\\n    zoom: 16, center: { lng: 116.332782, lat: 40.007978 },\\n    widget: ['NavigationControl']\\n  });\\n\\n  const { setVisiable } = useTileLayer({\\n    visiable: show,\\n    map, getTilesUrl: (tileCoord, zoom) => {\\n      const { x, y } = tileCoord;\\n      // 根据当前坐标，选取合适的瓦片图\\n      return `http://lbsyun.baidu.com/jsdemo/demo/tiles/${zoom}/tile${x}_${y}.png`;\\n    }\\n  });\\n\\n  useEffect(() => {\\n    if (divElm.current && !map) {\\n      setContainer(divElm.current);\\n    }\\n  }, [map]);\\n  return (\\n    <>\\n      <button onClick={() => {\\n        setShow(!show)\\n        setVisiable(!show)\\n      }}>\\n        {show ? '关闭' : '开启'}\\n      </button>\\n      <div ref={divElm} style={{ height: '100%' }} />\\n    </>\\n  );\\n}\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%', height: '300px' }}>\\n    <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n      <Example />\\n    </APILoader>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### Props\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n| ----- | ----- | ----- | ----- |\\n| visiable | 地图图层是否可见 | `Boolean` | - |\\n| transparentPng | 是否使用了带有透明信息的PNG。由于IE6不支持PNG透明，因此需要特殊处理。 | `Boolean` | - |\\n| tileUrlTemplate | 指定图块网址模板，该模板可以针对每个图块请求而展开，以根据现有的图块坐标系引用唯一的图块。模板的格式应该为：`http://yourhost/tile?x={X}&y={Y}&z={Z}.png` 其中X和Y分别指纬度和经度图块坐标，Z指缩放级别，比如： `http://yourhost/tile?x=3&y=27&z=5.png` 如果您没有提供图块网址模板，您需要实现`TileLayer.getTileUrl()` 抽象方法。 | `string` | - |\\n| getTilesUrl | 抽象。向地图返回地图图块的网址，图块索引由 `tileCoord` 的 `x` 和 `y` 属性在指定的缩放级别 `zoom` 提供。如果您在 `TileLayerOptions` 中提供了tileUrlTemplate参数，则可不实现此接口。| `(tileCoord: Pixel, zoom: number): string;` | - |\\n| getCopyright | 返回地图图层数据的版权对象 | `(): Copyright` | - |\\n| copyright | 地图图层的版权信息 | `Copyright` | - |\\n| zIndex | 图层的 `zIndex` | `number` | - |\\n\";"],"sourceRoot":""}