{"version":3,"sources":["../../packages/info-window/README.md"],"names":[],"mappings":"qGAAA,OAAe","file":"static/js/55.0515ef88.chunk.js","sourcesContent":["export default \"InfoWindow 信息窗口\\n===\\n\\n表示地图上包含信息的窗口。\\n\\n```jsx\\nimport { InfoWindow, useInfoWindow } from '@uiw/react-baidu-map';\\n// 或者单独安装使用\\nimport InfoWindow, { useInfoWindow } from '@uiw/react-baidu-map-info-window';\\n```\\n\\n### 基本用法\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React, { useState } from 'react';\\nimport { Map, InfoWindow, APILoader } from '@uiw/react-baidu-map';\\n\\nconst Example = () => {\\n  const [visiable, setVisiable] = useState(true);\\n  const [ isOpen, setIsOpen ] = useState(true);\\n  const [ content, setContent ] = useState('上海市 <del>青浦区</del> 徐泾镇盈港东路');\\n\\n  function infoWindowRef(props) {\\n    if (props && props.infoWindow) {\\n      console.log('infoWindow:', props.infoWindow, props.map, props.BMap);\\n    }\\n  }\\n  return (\\n    <>\\n      <button onClick={() => setIsOpen(!isOpen)}>{isOpen ? '关闭' : '打开'} isOpen={String(isOpen)}</button>\\n      <button onClick={() => setVisiable(!visiable)}>{visiable ? '隐藏' : '显示'}visiable={String(visiable)}</button>\\n      <input value={content} onChange={(e) => setContent(e.target.value)} />\\n      <Map zoom={13} center={{ lng: 121.460977, lat: 31.227906 }}>\\n        <InfoWindow\\n          ref={infoWindowRef}\\n          visiable={visiable}\\n          isOpen={isOpen}\\n          onClose={() => {\\n            console.log(':onClose');\\n          }}\\n          position={{ lng: 121.501365, lat: 31.224942 }}\\n          content={content}\\n          title=\\\"地址信息一\\\"\\n        />\\n      </Map>\\n    </>\\n  );\\n}\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%', height: '350px' }}>\\n    <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n      <Example />\\n    </APILoader>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 使用 hooks\\n\\n`infoWindow`, `setInfoWindow`, `isOpen`, `setIsOpen`\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React, { useRef, useState, useEffect } from 'react';\\nimport { Map, useMap, InfoWindow, useInfoWindow, APILoader } from '@uiw/react-baidu-map';\\n\\nconst Example = () => {\\n  const divElm = useRef(null);\\n  const { setContainer, map } = useMap({\\n    zoom: 13, center: { lng: 121.460977, lat: 31.227906 },\\n    widget: ['GeolocationControl', 'NavigationControl']\\n  });\\n\\n  const [title, setTitle] = useState('地址信息二');\\n  const position = { lng: 121.501365, lat: 31.224942 };\\n  const { infoWindow, isOpen, setIsOpen } = useInfoWindow({\\n    BMap, map, position, enableCloseOnClick: false, isOpen: true,\\n    content: '上海市 <del>青浦区</del> 徐泾镇盈港东路',\\n    title,\\n    onClose: () => {\\n      console.log('onClose:');\\n    }\\n  });\\n  useEffect(() => {\\n    if (divElm.current) {\\n      setContainer(divElm.current);\\n    }\\n  });\\n  return (\\n    <>\\n      <button onClick={() => setIsOpen(!isOpen)}>{isOpen ? '显示' : '隐藏'}</button>\\n      <input value={title} onChange={(e) => setTitle(e.target.value)} />\\n      <div ref={divElm} style={{ height: 350 }} />\\n    </>\\n  )\\n}\\n\\nconst Demo = () => {\\n  return (\\n    <div style={{ width: '100%' }}>\\n      <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n        <Example />\\n      </APILoader>\\n    </div>\\n  )\\n};\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### Props\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n| ----- | ----- | ----- | ----- |\\n| position | **`必填`** 指定的经度和纬度创建一个地理点坐标 | `Point` | - |\\n| isOpen | 窗口是否打开 | `Point` | - |\\n| visiable | 覆盖物是否可见。此属性来自继承 Overlay 实例对象。 | `boolean` | - |\\n| width | 信息窗宽度，单位像素。取值范围：0, 220 - 730。如果您指定宽度为0，则信息窗口的宽度将按照其内容自动调整 | `number` | `true` |\\n| height | 信息窗高度，单位像素。取值范围：0, 60 - 650。如果您指定宽度为0，则信息窗口的宽度将按照其内容自动调整 | `number` | - |\\n| maxWidth | 信息窗最大化时的宽度，单位像素。取值范围：220 - 730 | `number` | - |\\n| offset | 信息窗位置偏移值。默认情况下在地图上打开的信息窗底端的尖角将指向其地理坐标，在标注上打开的信息窗底端尖角的位置取决于标注所用图标的 infoWindowOffset 属性值，您可以为信息窗添加偏移量来改变默认位置 | `Size` | - |\\n| content | 展示文本内容，支持 HTML 内容字符串 | `string` | - |\\n| maxContent | 信息窗口最大化时所显示内容，支持HTML内容 | `string` | - |\\n| title | 信息窗标题文字，支持HTML内容 | `string` | - |\\n| message | 自定义部分的短信内容，可选项。完整的短信内容包括：自定义部分+位置链接，不设置时，显示默认短信内容。短信内容最长为140个字 | `string` | - |\\n| enableAutoPan | 是否开启信息窗口打开时地图自动移动（默认开启） | `boolean` | - |\\n| enableCloseOnClick | 是否开启点击地图关闭信息窗口（默认开启） | `boolean` | - |\\n| enableMaximize | 启用窗口最大化功能。需要设置最大化后信息窗口里的内容，该接口才生效 | `boolean` | - |\\n\\n### 事件\\n\\n| 参数 | 说明 | 类型 |\\n| ----- | ----- | ----- |\\n| onClose | 信息窗口被关闭时触发此事件 | (event: { type: string, target: any, point: Point }) => void; |\\n| onOpen | 信息窗口被打开时触发此事件 | (event: { type: string, target: any, point: Point }) => void; |\\n| onMaximize | 信息窗口最大化后触发此事件 | (event: { type: string, target: any }) => void; |\\n| onRestore | 信息窗口还原时触发此事件 | (event: { type: string, target: any }) => void; |\\n| onClickclose | 点击信息窗口的关闭按钮时触发此事件 | (event: { type: string, target: any }) => void; |\\n\";"],"sourceRoot":""}