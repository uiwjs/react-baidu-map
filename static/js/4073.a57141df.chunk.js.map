{"version":3,"file":"static/js/4073.a57141df.chunk.js","mappings":"+GAAA,qspB","sources":["../../packages/map/README.md"],"sourcesContent":["export default \"Map 组件\\n===\\n\\nMap 组件是其他组件的基础，Map 组件会给所有的子组件注入两个属性 **`map`**，**`container`** 和 **`BMap`**，在 `v2.3.0+` 版本支持使用 `useMapContext` 获取它们。\\n\\n🚧 注意\\n\\n> 1. 组件 `<Map>` 必须包裹在 `<APILoader>` 组件内，该组件作用是加载百度地图 SDK。  \\n> 2. 其他地图组件必须作为 `<Map>` 的子组件使用；\\n<!--rehype:style=border-left: 8px solid #ffe564;background-color: #ffe56440;padding: 12px 3px;-->\\n\\n<!--rehype-->\\n```jsx\\nimport { Map, useMap, APILoader, Provider, useMapContext } from '@uiw/react-baidu-map';\\n// 或者单独安装使用\\nimport Map, { useMap, APILoader, Provider, useMapContext } from '@uiw/react-baidu-map-map';\\n```\\n\\n🚧  注意：需要使用到 `<Provider>`，新的封装 `Marker` 组建使用了 `Context` 来避免 `map` 对象传来传去。\\n\\n### 基本用法\\n\\nMap 的父组件必须具有宽度和高度；\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { Map, APILoader } from '@uiw/react-baidu-map';\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%', height: '300px' }}>\\n    <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n      <Map />\\n    </APILoader>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 小工具\\n\\n百度地图上负责与地图交互的UI元素称为控件。百度地图API中提供了丰富的控件，您还可以通过 Control 类来实现自定义控件，[`百度控件文档`](http://lbsyun.baidu.com/index.php?title=jspopular3.0/guide/widget)。\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { Map, APILoader } from '@uiw/react-baidu-map';\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%', height: '300px' }}>\\n    <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n      <Map\\n        ref={(props) => {\\n          if (props && props.map) {\\n            // 启用滚轮放大缩小，默认禁用\\n            props.map.enableScrollWheelZoom();\\n          }\\n        }}\\n        widget={[\\n          'GeolocationControl',\\n          {\\n            name: 'OverviewMapControl',\\n            options: {\\n              isOpen: true,\\n            }\\n          },\\n          {\\n            name: 'CopyrightControl',\\n            control: (BMap, map) => {\\n              // 设置版权控件位置\\n              const cr = new BMap.CopyrightControl({ anchor: BMAP_ANCHOR_TOP_RIGHT });\\n              // 返回地图可视区域\\n              const bs = map.getBounds();\\n              cr.removeCopyright(1);\\n              cr.addCopyright({\\n                id: 1,\\n                content: \\\"<a href='#' style='font-size:20px;background:yellow'>我是自定义版权控件呀</a>\\\",\\n                // bounds: bs,\\n              });\\n              return cr;\\n            },\\n          },\\n          {\\n            name: 'NavigationControl',\\n            options: (BMap) => {\\n              return {\\n                offset: new BMap.Size(150, 5),\\n                showZoomInfo: false,\\n                enableGeolocation: true,\\n              }\\n            }\\n          }\\n        ]}\\n      />\\n    </APILoader>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### useMapContext & Provider\\n\\n通过 React 的 Context 提供了一个`无需`为每层组件手动注入 ~~`map`~~，~~`container`~~ 和 ~~`BMap`~~ 三个属性 `props`，就能在组件树间进行传递。\\n\\n> 🚧 在 `v2.3.0+` 版本支持\\n<!--rehype:style=border-left: 8px solid #ffe564;background-color: #ffe56440;padding: 12px 10px;-->\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { useState } from 'react';\\nimport { Map, APILoader, useMap, Provider, useMapContext } from '@uiw/react-baidu-map';\\n\\nconst Marker = () => {\\n  const { map } = useMapContext();\\n  const container = useRef(null);\\n  const { setContainer } = useMap({\\n    zoom: 9,\\n    widget: ['GeolocationControl', 'NavigationControl']\\n  });\\n\\n  useEffect(() => {\\n    if (container.current) {\\n      setContainer(container.current);\\n    }\\n  }, [container.current]);\\n\\n  useEffect(() => {\\n    if (map) {\\n      // 创建点标记\\n      const marker1 = new BMap.Marker(new BMap.Point(116.404, 39.925));\\n      const marker2 = new BMap.Marker(new BMap.Point(116.404, 39.915));\\n      const marker3 = new BMap.Marker(new BMap.Point(116.395, 39.935));\\n      const marker4 = new BMap.Marker(new BMap.Point(116.415, 39.931));\\n      // 在地图上添加点标记\\n      map.addOverlay(marker1);\\n      map.addOverlay(marker2);\\n      map.addOverlay(marker3);\\n      map.addOverlay(marker4);\\n    }\\n  }, [map]);\\n  return (\\n    <div ref={container} style={{ height: 300 }} />\\n  );\\n}\\n\\nconst Demo = () => {\\n  return (\\n    <div style={{ width: '100%', height: '300px' }}>\\n      <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n        <Provider>\\n          <div>\\n            <Marker />\\n          </div>\\n        </Provider>\\n      </APILoader>\\n    </div>\\n  );\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n```js\\nimport { useMapContext, Provider } from '@uiw/react-baidu-map';\\n\\nconst { AMaps, map, container, state, dispatch } = useMapContext();\\n// => state.AMaps\\n// => state.map\\n// => state.container\\n```\\n\\n### 可控属性\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { useState } from 'react';\\nimport { Map, APILoader } from '@uiw/react-baidu-map';\\n\\nconst Demo = () => {\\n  const [center, setCenter] = useState('北京');\\n  const [enableScrollWheelZoom, setEnableScrollWheelZoom] = useState(true);\\n  return (\\n    <div style={{ width: '100%', height: '300px' }}>\\n      <button onClick={() => setCenter('北京')}>北京</button>\\n      <button onClick={() => setCenter('上海')}>上海</button>\\n      <button onClick={() => setEnableScrollWheelZoom(!enableScrollWheelZoom)}>{enableScrollWheelZoom ? '禁用': '启用'}滚轮放大缩小</button>\\n      <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n        <Map enableScrollWheelZoom={enableScrollWheelZoom} zoom={10}  center={center}/>\\n      </APILoader>\\n    </div>\\n  );\\n}\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 使用 hooks\\n\\n`map`, `setMap`, `container`, `setContainer`, `zoom`, `setZoom`, `setCenter`, `autoLocalCity`, `setAutoLocalCity`,\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { useRef, useEffect, useState } from 'react';\\nimport { Map, APILoader, useMap } from '@uiw/react-baidu-map';\\n\\nconst Example = () => {\\n  const divElm = useRef();\\n  const [zoom, setZoom] = useState(15)\\n  const { setContainer, map, center, setCenter, setAutoLocalCity } = useMap({\\n    enableScrollWheelZoom: true, // 启用滚轮放大缩小，默认禁用\\n    center: '北京',\\n    widget: ['GeolocationControl', 'NavigationControl']\\n  });\\n  useEffect(() => {\\n    if (divElm.current && !map) {\\n      setContainer(divElm.current);\\n    }\\n  });\\n\\n  useEffect(() => {\\n    if (map) {\\n      // 启用滚轮放大缩小，默认禁用\\n      map.setZoom(zoom);\\n    }\\n  }, [zoom, map]);\\n  \\n  return (\\n    <>\\n      <button onClick={() => setZoom(zoom-1)}>-</button>\\n      <span>{zoom || 15}</span>\\n      <button onClick={() => setZoom(zoom+1)}>+</button>\\n      <button onClick={() => setCenter('北京')}>北京</button>\\n      <button onClick={() => setCenter('上海')}>上海</button>\\n      <button onClick={() => setAutoLocalCity(true)}>IP定位</button>\\n      <div ref={divElm} style={{ height: 350 }} />\\n    </>\\n  )\\n}\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%' }}>\\n    <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n      <Example />\\n    </APILoader>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### Props\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n|--------- |-------- |--------- |-------- |\\n| widget | 百度地图上负责与地图交互的UI元素称为控件，实例参考。[百度控件文档](http://lbsyun.baidu.com/index.php?title=jspopular3.0/guide/widget) | `string[]`/`object[]` | `[]` |\\n| center | 定位, 可使用如 `上海市青浦区` 的地区字符串，也可以使用对象如 `{lng: 121.424333, lat: 31.228604}` 表示经纬度。[百度拾取坐标系统](http://api.map.baidu.com/lbsapi/getpoint/index.html) | Point,String | `上海市` |\\n| autoLocalCity | 设为 `true`, IP定位获取当前城市，进行自动定位 | boolean | - |\\n| zoom | 缩放等级，如果 `center` 类型为 `Point` 时，zoom必须赋值，范围 `3-19` 级， 若调用高清底图（针对移动端开发）时，zoom 可赋值范围为 `3-18` 级。 如果center类型为字符串时，比如“北京”，zoom可以忽略，地图将自动根据 `center` 适配最佳 `zoom` 级别 | `number` | - |\\n| minZoom | 地图允许展示的最小级别 | `number` | - |\\n| maxZoom | 地图允许展示的最大级别 | `number` | - |\\n| mapType | 地图类型 | MapType | `BMAP_NORMAL_MAP` |\\n| mapStyle | 设置地图样式 | `MapStyle` | - |\\n| defaultCursor | 设置地图默认的鼠标指针样式。参数 `cursor` 应符合 CSS 的 `cursor` 属性规范 | `string` | - |\\n| draggingCursor | 设置拖拽地图时的鼠标指针样式。参数 `cursor` 应符合 CSS 的 `cursor` 属性规范 | `string` | - |\\n| panorama | 将全景实例与Map类进行绑定 | `Panorama` | - |\\n| currentCity | 设置地图城市，注意当地图初始化时的类型设置为 `BMAP_NORMAL_MAP` 时，需要在调用 `centerAndZoom` 之前调用此方法设置地图所在城市。例如： `var map = new BMap.Map(“container”, {mapType: BMAP_NORMAL_MAP}); map.setCurrentCity(“北京市”); map.centerAndZoom(new BMap.Point(116.404, 39.915), 18);` 注意：初始化的坐标应与您设置的城市对应，否则地图将无法正常显示。 | string | - |\\n| viewport | 根据提供的地理区域或坐标设置地图视野，调整后的视野会保证包含提供的地理区域或坐标 | `(view: Array<Point> \\\\| Viewport, viewportOptions: ViewportOptions)` | - |\\n| mapStyleV2 | 设置地图样式的个性化地图服务V2，使用对象字面量形式表示，样式Json，通过[编辑器生成](http://lbsyun.baidu.com/apiconsole/custommap)。(支持Canvas) | `{ styleJson: MapStyleItem[] }` / `{styleId: string}` | - |\\n| enableHighResolution | 是否启用使用高分辨率地图。在iPhone4及其后续设备上，可以通过开启此选项获取更高分辨率的底图，v1.2,v1.3版本默认不开启，v1.4 默认为开启状态 | boolean | - |\\n| enableAutoResize | 是否启用自动适应容器尺寸变化，默认启用 | boolean | `true` |\\n| enableMapClick | 是否开启底图可点功能 | boolean | `true` |\\n| enableDragging | 启用地图拖拽，默认启用 | boolean | - |\\n| enableScrollWheelZoom | 启用滚轮放大缩小，默认禁用 | boolean | - |\\n| enableDoubleClickZoom | 启用双击放大，默认启用 | boolean | `true` |\\n| enableInertialDragging | 启用地图惯性拖拽，默认禁用 | boolean | - |\\n| enableContinuousZoom | 启用连续缩放效果，默认禁用 | boolean | - |\\n| enablePinchToZoom | 启用双指操作缩放，默认启用 | boolean | `true` |\\n| enableKeyboard | 启用键盘操作，默认禁用。键盘的上、下、左、右键可连续移动地图。同时按下其中两个键可使地图进行对角移动。PgUp、PgDn、Home和End键会使地图平移其1/2的大小。+、-键会使地图放大或缩小一级 | boolean | - |\\n\\n### 事件\\n\\n| 参数 | 说明 | 类型 |\\n| ----- | ----- | ----- |\\n| onClick | 左键单击地图时触发此事件。 当双击时，产生的事件序列为： click click dblclick | (event: {type: string, target: any, point: Point, pixel: Pixel, overlay: Overlay }): void; |\\n| onDblClick | 鼠标双击地图时会触发此事件 | (event: {type: string, target: any, pixel: Pixel, point: Point }): void; |\\n| onRightClick | 右键单击地图时触发此事件。 当双击时，产生的事件序列为： rightclick rightclick rightdblclick | (event: {type: string, target: any, point: Point, pixel: Pixel, overlay: Overlay }): void; |\\n| onRightdblClick | 右键双击地图时触发此事件 | (event: {type: string, target: any, point: Point, pixel: Pixel, overlay: Overlay }): void; |\\n| onMapTypeChange | 地图类型发生变化时触发此事件 | (event: {type: string, target: any }): void; |\\n| onMouseMove | 鼠标在地图区域移动过程中触发此事件 | (event: {type: string, target: any, point: Point, pixel: Pixel, overlay: Overlay }): void; |\\n| onMouseOver | 鼠标移入地图区域时触发此事件 | (event: {type: string, target: any }): void; |\\n| onMouseOut | 鼠标移出地图区域时触发此事件 | (event: {type: string, target: any }): void; |\\n| onMoveStart | 地图移动开始时触发此事件 | (event: {type: string, target: any }): void; |\\n| onMoving | 地图移动过程中触发此事件 | (event: {type: string, target: any }): void; |\\n| onMoveEnd | 地图移动结束时触发此事件 | (event: {type: string, target: any }): void; |\\n| onZoomStart | 地图更改缩放级别开始时触发触发此事件 | (event: {type: string, target: any }): void; |\\n| onZoomEnd | 地图更改缩放级别结束时触发触发此事件 | (event: {type: string, target: any }): void; |\\n| onAddOverlay | 当使用 Map.addOverlay() 方法向地图中添加单个覆盖物时会触发此事件 | (event: {type: string, target: any }): void; |\\n| onAddControl | 当使用 Map.addControl() 方法向地图中添加单个控件时会触发此事件 | (event: {type: string, target: any }): void; |\\n| onRemoveControl | 当使用 Map.removeControl() 方法移除单个控件时会触发此事件 | (event: {type: string, target: any }): void; |\\n| onRemoveOverlay | 当使用 Map.removeOverlay() 方法移除单个覆盖物时会触发此事件 | (event: {type: string, target: any }): void; |\\n| onClearOverlays | 当使用 Map.clearOverlays() 方法一次性移除全部覆盖物时会触发此事件 | (event: {type: string, target: any }): void; |\\n| onDragStart | 开始拖拽地图时触发 | (event: {type: string, target: any, pixel: Pixel, point: Point }): void; |\\n| onDragging | 拖拽地图过程中触发 | (event: {type: string, target: any, pixel: Pixel, point: Point }): void; |\\n| onDragEnd | 停止拖拽地图时触发 | (event: {type: string, target: any, pixel: Pixel, point: Point }): void; |\\n| onAddTileLayer | 添加一个自定义地图图层时触发此事件 | (event: {type: string, target: any }): void; |\\n| onRemoveTileLayer | 移除一个自定义地图图层时触发此事件 | (event: {type: string, target: any }): void; |\\n| onLoad | 调用Map.centerAndZoom()方法时会触发此事件。这表示位置、缩放层级已经确定，但可能还在载入地图图块 | (event: {type: string, target: any, pixel: Pixel, point: Point, zoom: number }): void; |\\n| onReSize | 地图可视区域大小发生变化时会触发此事件 | (event: {type: string, target: any, size: Size }): void; |\\n| onHotspotClick | 点击热区时触发此事件 | (event: {type: string, target: any, spots: HotspotOptions }): void; |\\n| onHotspotOver | 鼠标移至热区时触发此事件 | (event: {type: string, target: any, spots: HotspotOptions }): void; |\\n| onHotspotOut | 鼠标移出热区时触发此事件 | (event: {type: string, target: any, spots: HotspotOptions }): void; |\\n| onTilesLoaded | 当地图所有图块完成加载时触发此事件 | (event: {type: string, target: any }): void; |\\n| onTouchStart | 触摸开始时触发此事件，仅适用移动设备 | (event: {type: string, target: any, point: Point, pixel}): void; |\\n| onTouchMove | 触摸移动时触发此事件，仅适用移动设备 | (event: {type: string, target: any, point: Point, pixel}): void; |\\n| onTouchEnd | 触摸结束时触发此事件，仅适用移动设备 | (event: {type: string, target: any, point: Point, pixel}): void; |\\n| onLongPress | 长按事件，仅适用移动设备 | (event: {type: string, target: any, point: Point, pixel}): void; |\";"],"names":[],"sourceRoot":""}