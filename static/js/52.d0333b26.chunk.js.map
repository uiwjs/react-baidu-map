{"version":3,"sources":["../../packages/curve-line/README.md"],"names":[],"mappings":"qGAAA,OAAe","file":"static/js/52.d0333b26.chunk.js","sourcesContent":["export default \"CurveLine 弧线组件\\n===\\n\\n使用浏览器的矢量制图工具（如果可用）在地图上绘制弧线的地图叠加层，当前组件自动加载 [CurveLine.min.js](https://api.map.baidu.com/library/CurveLine/1.5/src/CurveLine.min.js) 包，加载完成将会有个 `window.BMapLib` 的全局对象。\\n\\n```jsx\\nimport { CurveLine, useCurveLine } from '@uiw/react-baidu-map';\\n// 或者单独安装使用\\nimport CurveLine, { useCurveLine } from '@uiw/react-baidu-map-curve-line';\\n```\\n\\n### 基本用法\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React, { useState } from 'react';\\nimport { Map, CurveLine, APILoader } from '@uiw/react-baidu-map';\\n\\nconst Example = () => {\\n  const [enableEditing, setEnableEditing] = useState(false);\\n  const [strokeOpacity, setStrokeOpacity] = useState(0.5);\\n  function curveLineRef(props) {\\n    if (props && props.curveLine) {\\n      console.log('curveLine:', props.curveLine, props.map, props.BMapLib);\\n    }\\n  }\\n  return (\\n    <>\\n      <button onClick={() => setEnableEditing(!enableEditing)}>{enableEditing ? '取消编辑' : '编辑'}</button>\\n      <button onClick={() => setStrokeOpacity(0.7)}>透明度0.7</button>\\n      <button onClick={() => setStrokeOpacity(0.2)}>透明度0.2</button>\\n      <Map zoom={4} center=\\\"武汉\\\" widget={['NavigationControl']} style={{ height: 350 }}>\\n        <CurveLine\\n          ref={curveLineRef}\\n          enableEditing={enableEditing}\\n          strokeOpacity={strokeOpacity}\\n          strokeWeight={3}\\n          strokeColor=\\\"blue\\\"\\n          path={[\\n            { lng: 116.432045, lat: 39.910683 },\\n            { lng: 114.300404, lat: 30.63216 },\\n            { lng: 121.491121, lat: 25.127053 },\\n          ]}\\n        />\\n      </Map>\\n    </>\\n  );\\n}\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%' }}>\\n    <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n      <Example />\\n    </APILoader>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 使用 hooks\\n\\n`curveLine`, `setCurveLine`, `path`, `setPath`, `BMapLib`\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport { useRef, useEffect, useState } from 'react';\\nimport { Map, APILoader, useMap, useCurveLine } from '@uiw/react-baidu-map';\\n\\nconst Example = () => {\\n  const [enableEditing, setEnableEditing] = useState(false);\\n  const [strokeOpacity, setStrokeOpacity] = useState(0.9);\\n  const divElm = useRef(null);\\n  const { setContainer, map } = useMap({\\n    zoom: 8,\\n    enableScrollWheelZoom: true,\\n    widget: ['GeolocationControl', 'NavigationControl']\\n  });\\n  const { curveLine } = useCurveLine({ map,\\n    enableEditing, strokeOpacity,\\n    path: [\\n      { lng: 118.798544, lat: 32.076761 },\\n      { lng: 120.785452, lat: 30.759355 },\\n      { lng: 120.895835, lat: 31.974881 },\\n    ],\\n  });\\n  useCurveLine({ map,\\n    path: [\\n      { lng: 118.770948, lat: 30.9419 },\\n      { lng: 120.583081, lat: 31.313834 },\\n      { lng: 121.484549, lat: 31.226918 },\\n    ],\\n  });\\n\\n  useEffect(() => {\\n    if (divElm.current) {\\n      setContainer(divElm.current);\\n    }\\n  });\\n\\n  useEffect(() => {\\n    if (map && curveLine) {\\n      if (enableEditing) {\\n        curveLine.enableEditing();\\n      } else {\\n        curveLine.disableEditing();\\n      }\\n    }\\n  }, [enableEditing]);\\n\\n  useEffect(() => {\\n    if (map && curveLine) {\\n      curveLine.setStrokeOpacity(strokeOpacity);\\n    }\\n  }, [strokeOpacity]);\\n\\n  return (\\n    <>\\n      <button onClick={() => setEnableEditing(!enableEditing)}>{enableEditing ? '取消编辑' : '编辑'}</button>\\n      <button onClick={() => setStrokeOpacity(0.7)}>透明度0.7</button>\\n      <button onClick={() => setStrokeOpacity(0.2)}>透明度0.2</button>\\n      <div ref={divElm} style={{ height: 350 }} />\\n    </>\\n  )\\n}\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%' }}>\\n    <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n      <Example />\\n    </APILoader>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### Props\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n| ----- | ----- | ----- | ----- |\\n| visiable | 覆盖物是否可见。 | `boolean` | - |\\n| strokeColor |  折线颜色 | String | - |\\n| strokeWeight |  折线的宽度，以像素为单位 | Number | - |\\n| strokeOpacity |  折线的透明度，取值范围0 - 1 | Number | - |\\n| strokeStyle |  折线的样式，solid或dashed | String | - |\\n| enableMassClear |  是否在调用map.clearOverlays清除此覆盖物，默认为true | Boolean | - |\\n| enableEditing |  是否启用线编辑，默认为false | Boolean | `false` |\\n| enableClicking |  是否响应点击事件，默认为true | Boolean | - |\\n| icons | 配置贴合折线的图标 | IconSequence[] | - |\\n\\n### 事件\\n\\n| 参数 | 说明 | 类型 |\\n| ----- | ----- | ----- |\\n| onClick | 点击折线后会触发此事件 | (event: { type: string, target: any, point: Point, pixel: Pixel }): void; |\\n| onDblClick | 双击折线后会触发此事件 | (event: { type: string, target: any, point: Point, pixel: Pixel }): void; |\\n| onMouseDown | 鼠标在折线上按下触发此事件 | (event: { type: string, target: any, point: Point, pixel: Pixel }): void; |\\n| onMouseUp | 鼠标在折线释放触发此事件 | (event: { type: string, target: any, point: Point, pixel: Pixel }): void; |\\n| onMouseOut | 鼠标离开折线时触发此事件 | (event: { type: string, target: any, point: Point, pixel: Pixel }): void; |\\n| onMouseOver | 当鼠标进入折线区域时会触发此事件 | (event: { type: string, target: any, point: Point, pixel: Pixel }): void; |\\n| onRemove | 移除折线时触发 | (event: { type: string, target: any }): void; |\\n| onLineUpdate | 覆盖物的属性发生变化时触发 | (event: { type: string, target: any }): void; |\";"],"sourceRoot":""}