{"version":3,"sources":["../src/Label/README.md"],"names":[],"mappings":"sIAAA,OAAe","file":"static/js/57.a0a754b8.chunk.js","sourcesContent":["export default \"Label 文本标注\\n===\\n\\n表示地图上包含信息的窗口。\\n\\n```jsx\\nimport { Label, useLabel } from '@uiw/react-baidu-map';\\n```\\n\\n### 基本用法\\n\\n官方原生 JS 实例：https://lbsyun.baidu.com/jsdemo.htm#c1_14\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React, { useState } from 'react';\\nimport { Map, Label, APILoader } from '@uiw/react-baidu-map';\\n\\nconst Example = () => {\\n  const [visiable, setVisiable] = useState(true);\\n  const [content, setContent] = useState('上海市 <del>青浦区</del> 徐泾镇盈港东路');\\n  function labelRef(props) {\\n    if (props && props.label) {\\n      console.log('label:', props.label, props.map, props.BMap);\\n    }\\n  }\\n  return (\\n    <>\\n      <input value={content} onChange={(e) => setContent(e.target.value)} />\\n      <button onClick={() => setVisiable(!visiable)}>{visiable ? '隐藏' : '显示'}</button>\\n      <Map zoom={13} widget={['NavigationControl']} style={{ height: 350 }} />\\n        <Label visiable={visiable} content={content} position={{ lng: 121.436256, lat: 31.246926 }}/>\\n        <Label\\n          ref={labelRef}\\n          title=\\\"wwww\\\"\\n          content={content}\\n          position={{ lng: 121.501365, lat: 31.224942 }}\\n          onClick={() => setContent('您！点击了文本标注！')}\\n        />\\n      </Map>\\n    </>\\n  );\\n}\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%' }}>\\n    <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n      <Example />\\n    </APILoader>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 使用 hooks\\n\\n`label`, `setLabel`\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport { useRef, useEffect, useState } from 'react';\\nimport { Map, APILoader, useMap, useLabel } from '@uiw/react-baidu-map';\\n\\nconst Example = () => {\\n  const divElm = useRef(null);\\n  const { map, setContainer, zoom, setZoom, center } = useMap({\\n    zoom: 9,\\n    widget: ['GeolocationControl', 'NavigationControl']\\n  });\\n  const { label } = useLabel({ map,\\n    content: '徐泾镇',\\n    position: { lng: 121.436256, lat: 31.246926 },\\n    onClick: () => {\\n      console.log('点击事件！');\\n    }\\n  });\\n\\n  useEffect(() => {\\n    if (divElm.current) {\\n      setContainer(divElm.current);\\n    }\\n  });\\n  let counts = zoom || 15;\\n  return (\\n    <>\\n      <button onClick={() => setZoom(counts-1)}>-</button>\\n      <span>{zoom || 15}</span>\\n      <button onClick={() => setZoom(counts+1)}>+</button>\\n      <div ref={divElm} style={{ height: 350 }} />\\n    </>\\n  )\\n}\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%' }}>\\n    <APILoader akay=\\\"GTrnXa5hwXGwgQnTBG28SHBubErMKm3f\\\">\\n      <Example />\\n    </APILoader>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### Props\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n| ----- | ----- | ----- | ----- |\\n| content | 文本标注内容 | `string` | - |\\n| offset | 文本标注的位置偏移值 | `Size` | - |\\n| position | 文本标注的地理位置 | `Point` | - |\\n| title | 文本标注的标题 | `string` | - |\\n| zIndex | 设置覆盖物的 zIndex | `number` | - |\\n| style | 文本标注样式，该样式将作用于文本标注的容器元素上，如：`{ color : \\\"red\\\", fontSize : \\\"12px\\\" }`。 | `Style` | - |\\n| visiable | 覆盖物是否可见。 | `boolean` | - |\\n| enableMassClear | 允许覆盖物在 map.clearOverlays 方法中被清除 | `boolean` | - |\\n\\n### 事件\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n| ----- | ----- | ----- | ----- |\\n| onClick | 点击文本标注后会触发此事件 | (event: { type: string, target: any }) => void; | - |\\n| onDblClick | 双击文本标注后会触发此事件 | (event: { type: string, target: any }) => void; | - |\\n| onMouseDown | 鼠标在文本标注上按下触发此事件 | (event: { type: string, target: any }) => void; | - |\\n| onMouseUp | 鼠标在文本标注释放触发此事件 | (event: { type: string, target: any }) => void; | - |\\n| onMouseOout | 鼠标离开文本标注时触发此事件 | (event: { type: string, target: any }) => void; | - |\\n| onMouseOver | 当鼠标进入文本标注区域时会触发此事件 | (event: { type: string, target: any }) => void; | - |\\n| onRemove | 移除文本标注时触发 | (event: { type: string, target: any }) => void; | - |\\n| onRightClick | 右键点击标注时触发此事件 | (event: { type: string, target: any }) => void; | - |\";"],"sourceRoot":""}